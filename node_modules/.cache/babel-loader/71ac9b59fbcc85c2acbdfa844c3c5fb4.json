{"ast":null,"code":"/**\n * File Description: This is a utility file to have shared functions\n * Author(s): Sashank Pindiproli\n * Date of Creation: 03/02/2020\n */\nimport moment from 'moment';\nexport const formatDisplayDate = date => moment(date).format('LLLL').replace(moment(date).format('LT'), '');\nexport const calculateTimeDifference = (departureTime, arrivalTime) => {\n  console.log(departureTime, arrivalTime);\n  let startTime = moment(departureTime, 'YYYY/MM/DD HH:mm:ss');\n  let endTime = moment(arrivalTime, 'YYYY/MM/DD HH:mm:ss'); // calculate total duration\n\n  let duration = moment.duration(endTime.diff(startTime)); // duration in hours\n\n  let hours = parseInt(duration.asHours()); // duration in minutes\n\n  let minutes = parseInt(duration.asMinutes()) % 60;\n  return `${hours} h ${minutes} m`;\n};\nexport const formatMoney = (price, currency) => {\n  switch (currency) {\n    case 'INR':\n      return `\\u20B9 ${price}`;\n\n    case 'DLR':\n      return `\\u0024 ${price}`;\n  }\n};\n/**\n * \n * SAMPLE OBJECT = {\n    \"arrivalTime\": \"14:15\",\n    \"date\": \"2020/11/01\",\n    \"departureTime\": \"13:15\",\n    \"destination\": \"Pune (PNQ)\",\n    \"flightNo\": \"AI-117\",\n    \"name\": \"Air India\",\n    \"origin\": \"Mumbai (BOM)\",\n    \"price\": 5117\n  },\n  {\n    \"arrivalTime\": \"6:00\",\n    \"date\": \"2020/11/02\",\n    \"departureTime\": \"5:00\",\n    \"destination\": \"Mumbai (BOM)\",\n    \"flightNo\": \"AI-119\",\n    \"name\": \"Air India\",\n    \"origin\": \"Delhi (DEL)\",\n    \"price\": 3525\n  }, \n */\n\nexport const findMultiAirline = async (flightsList, originAirport = 'Pune (PNQ)', destinationAirport = 'Delhi (DEL)') => {\n  let mergeList = [],\n      multiAir = {}; // Seperate all the ones that are having matching origins\n  // Seperate all the ones that are having matching destinations\n\n  let destinations = flightsList.filter(({\n    destination,\n    origin\n  }) => destination === destinationAirport && origin !== origin);\n  let origins = flightsList.filter(({\n    destination,\n    origin\n  }) => origin === originAirport && destination !== destinationAirport);\n  console.log(destinations);\n  console.log(origins);\n  let count = 0;\n\n  for (let originPlace of origins) {\n    for (let destPlace of destinations) {\n      if (originPlace['destination'] === destPlace['origin']) {//mergeList.push(originPlace);\n        //mergeList.push(destPlace);\n        //multiAir[count] = mergeList;\n        //count += 1;\n      }\n    }\n  }\n\n  console.log(mergeList, multiAir);\n};","map":{"version":3,"sources":["/Users/sashankpindiproli/flightsearchapp/src/util.js"],"names":["moment","formatDisplayDate","date","format","replace","calculateTimeDifference","departureTime","arrivalTime","console","log","startTime","endTime","duration","diff","hours","parseInt","asHours","minutes","asMinutes","formatMoney","price","currency","findMultiAirline","flightsList","originAirport","destinationAirport","mergeList","multiAir","destinations","filter","destination","origin","origins","count","originPlace","destPlace"],"mappings":"AAAA;;;;;AAKA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,IAAD,IAC/BF,MAAM,CAACE,IAAD,CAAN,CAAaC,MAAb,CAAoB,MAApB,EAA4BC,OAA5B,CAAoCJ,MAAM,CAACE,IAAD,CAAN,CAAaC,MAAb,CAAoB,IAApB,CAApC,EAA+D,EAA/D,CADK;AAGP,OAAO,MAAME,uBAAuB,GAAG,CAACC,aAAD,EAAgBC,WAAhB,KAAgC;AACrEC,EAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ,EAA2BC,WAA3B;AACA,MAAIG,SAAS,GAAGV,MAAM,CAACM,aAAD,EAAgB,qBAAhB,CAAtB;AACA,MAAIK,OAAO,GAAGX,MAAM,CAACO,WAAD,EAAc,qBAAd,CAApB,CAHqE,CAKrE;;AACA,MAAIK,QAAQ,GAAGZ,MAAM,CAACY,QAAP,CAAgBD,OAAO,CAACE,IAAR,CAAaH,SAAb,CAAhB,CAAf,CANqE,CAQrE;;AACA,MAAII,KAAK,GAAGC,QAAQ,CAACH,QAAQ,CAACI,OAAT,EAAD,CAApB,CATqE,CAWrE;;AACA,MAAIC,OAAO,GAAGF,QAAQ,CAACH,QAAQ,CAACM,SAAT,EAAD,CAAR,GAAiC,EAA/C;AACA,SAAQ,GAAEJ,KAAM,MAAKG,OAAQ,IAA7B;AACD,CAdM;AAgBP,OAAO,MAAME,WAAW,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC9C,UAAQA,QAAR;AACE,SAAK,KAAL;AACE,aAAQ,UAASD,KAAM,EAAvB;;AACF,SAAK,KAAL;AACE,aAAQ,UAASA,KAAM,EAAvB;AAJJ;AAMD,CAPM;AASP;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,MAAME,gBAAgB,GAAG,OAC9BC,WAD8B,EAE9BC,aAAa,GAAG,YAFc,EAG9BC,kBAAkB,GAAG,aAHS,KAI3B;AACH,MAAIC,SAAS,GAAG,EAAhB;AAAA,MACEC,QAAQ,GAAG,EADb,CADG,CAGH;AACA;;AACA,MAAIC,YAAY,GAAGL,WAAW,CAACM,MAAZ,CACjB,CAAC;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAD,KACED,WAAW,KAAKL,kBAAhB,IAAsCM,MAAM,KAAKA,MAFlC,CAAnB;AAKA,MAAIC,OAAO,GAAGT,WAAW,CAACM,MAAZ,CACZ,CAAC;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAD,KACEA,MAAM,KAAKP,aAAX,IAA4BM,WAAW,KAAKL,kBAFlC,CAAd;AAIAjB,EAAAA,OAAO,CAACC,GAAR,CAAYmB,YAAZ;AAEApB,EAAAA,OAAO,CAACC,GAAR,CAAYuB,OAAZ;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,WAAT,IAAwBF,OAAxB,EAAiC;AAC/B,SAAK,IAAIG,SAAT,IAAsBP,YAAtB,EAAoC;AAClC,UAAIM,WAAW,CAAC,aAAD,CAAX,KAA+BC,SAAS,CAAC,QAAD,CAA5C,EAAwD,CACtD;AACA;AACA;AACA;AACD;AACF;AACF;;AAED3B,EAAAA,OAAO,CAACC,GAAR,CAAYiB,SAAZ,EAAuBC,QAAvB;AACD,CAlCM","sourcesContent":["/**\n * File Description: This is a utility file to have shared functions\n * Author(s): Sashank Pindiproli\n * Date of Creation: 03/02/2020\n */\nimport moment from 'moment';\n\nexport const formatDisplayDate = (date) =>\n  moment(date).format('LLLL').replace(moment(date).format('LT'), '');\n\nexport const calculateTimeDifference = (departureTime, arrivalTime) => {\n  console.log(departureTime, arrivalTime);\n  let startTime = moment(departureTime, 'YYYY/MM/DD HH:mm:ss');\n  let endTime = moment(arrivalTime, 'YYYY/MM/DD HH:mm:ss');\n\n  // calculate total duration\n  let duration = moment.duration(endTime.diff(startTime));\n\n  // duration in hours\n  let hours = parseInt(duration.asHours());\n\n  // duration in minutes\n  let minutes = parseInt(duration.asMinutes()) % 60;\n  return `${hours} h ${minutes} m`;\n};\n\nexport const formatMoney = (price, currency) => {\n  switch (currency) {\n    case 'INR':\n      return `\\u20B9 ${price}`;\n    case 'DLR':\n      return `\\u0024 ${price}`;\n  }\n};\n\n/**\n * \n * SAMPLE OBJECT = {\n    \"arrivalTime\": \"14:15\",\n    \"date\": \"2020/11/01\",\n    \"departureTime\": \"13:15\",\n    \"destination\": \"Pune (PNQ)\",\n    \"flightNo\": \"AI-117\",\n    \"name\": \"Air India\",\n    \"origin\": \"Mumbai (BOM)\",\n    \"price\": 5117\n  },\n  {\n    \"arrivalTime\": \"6:00\",\n    \"date\": \"2020/11/02\",\n    \"departureTime\": \"5:00\",\n    \"destination\": \"Mumbai (BOM)\",\n    \"flightNo\": \"AI-119\",\n    \"name\": \"Air India\",\n    \"origin\": \"Delhi (DEL)\",\n    \"price\": 3525\n  }, \n */\nexport const findMultiAirline = async (\n  flightsList,\n  originAirport = 'Pune (PNQ)',\n  destinationAirport = 'Delhi (DEL)'\n) => {\n  let mergeList = [],\n    multiAir = {};\n  // Seperate all the ones that are having matching origins\n  // Seperate all the ones that are having matching destinations\n  let destinations = flightsList.filter(\n    ({ destination, origin }) =>\n      destination === destinationAirport && origin !== origin\n  );\n\n  let origins = flightsList.filter(\n    ({ destination, origin }) =>\n      origin === originAirport && destination !== destinationAirport\n  );\n  console.log(destinations);\n\n  console.log(origins);\n  let count = 0;\n  for (let originPlace of origins) {\n    for (let destPlace of destinations) {\n      if (originPlace['destination'] === destPlace['origin']) {\n        //mergeList.push(originPlace);\n        //mergeList.push(destPlace);\n        //multiAir[count] = mergeList;\n        //count += 1;\n      }\n    }\n  }\n\n  console.log(mergeList, multiAir);\n};\n"]},"metadata":{},"sourceType":"module"}