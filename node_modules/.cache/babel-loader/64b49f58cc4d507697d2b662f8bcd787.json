{"ast":null,"code":"import _regeneratorRuntime from\"/Users/sashankpindiproli/flightsearchapp/node_modules/@babel/runtime/regenerator\";import _createForOfIteratorHelper from\"/Users/sashankpindiproli/flightsearchapp/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _asyncToGenerator from\"/Users/sashankpindiproli/flightsearchapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/**\n * File Description: This is a utility file to have shared functions\n * Author(s): Sashank Pindiproli\n * Date of Creation: 03/02/2020\n */import moment from'moment';export var formatDisplayDate=function formatDisplayDate(date){return moment(date).format('LLLL').replace(moment(date).format('LT'),'');};export var calculateTimeDifference=function calculateTimeDifference(departureTime,arrivalTime){var startTime=moment(departureTime,'YYYY/MM/DD HH:mm:ss');var endTime=moment(arrivalTime,'YYYY/MM/DD HH:mm:ss');// calculate total duration\nvar duration=moment.duration(endTime.diff(startTime));// duration in hours\nvar hours=parseInt(duration.asHours());// duration in minutes\nvar minutes=parseInt(duration.asMinutes())%60;return\"\".concat(hours,\" h \").concat(minutes,\" m\");};export var formatMoney=function formatMoney(price,currency){switch(currency){case'INR':return\"\\u20B9 \".concat(price);case'DLR':return\"$ \".concat(price);default:console.log('Error');}};/**\n * \n * SAMPLE OBJECT = {\n    \"arrivalTime\": \"14:15\",\n    \"date\": \"2020/11/01\",\n    \"departureTime\": \"13:15\",\n    \"destination\": \"Pune (PNQ)\",\n    \"flightNo\": \"AI-117\",\n    \"name\": \"Air India\",\n    \"origin\": \"Mumbai (BOM)\",\n    \"price\": 5117\n  },\n  {\n    \"arrivalTime\": \"6:00\",\n    \"date\": \"2020/11/02\",\n    \"departureTime\": \"5:00\",\n    \"destination\": \"Mumbai (BOM)\",\n    \"flightNo\": \"AI-119\",\n    \"name\": \"Air India\",\n    \"origin\": \"Delhi (DEL)\",\n    \"price\": 3525\n  }, \n */export var findMultiAirline=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(flightsList){var originAirport,destinationAirport,multiAirObject,destinations,origins,overview,_iterator,_step,originPlace,_iterator2,_step2,destPlace,_iterator3,_step3,object,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:originAirport=_args.length>1&&_args[1]!==undefined?_args[1]:'Pune (PNQ)';destinationAirport=_args.length>2&&_args[2]!==undefined?_args[2]:'Delhi (DEL)';multiAirObject=[];// Seperate all the ones that are having matching origins\n// Seperate all the ones that are having matching destinations\ndestinations=flightsList.filter(function(_ref2){var destination=_ref2.destination,origin=_ref2.origin;return destination===destinationAirport&&origin!==originAirport;});origins=flightsList.filter(function(_ref3){var destination=_ref3.destination,origin=_ref3.origin;return origin===originAirport&&destination!==destinationAirport;});overview={};_iterator=_createForOfIteratorHelper(origins);try{for(_iterator.s();!(_step=_iterator.n()).done;){originPlace=_step.value;_iterator2=_createForOfIteratorHelper(destinations);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){destPlace=_step2.value;if(originPlace['destination']===destPlace['origin']){/** LOGIC to add first into the array, then check if it exists, check if its already added in the array, if not add it */if(multiAirObject.length===0){multiAirObject=createMultiAirObject({},destPlace,originPlace,multiAirObject);}else{_iterator3=_createForOfIteratorHelper(multiAirObject);try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){object=_step3.value;if(!object.overview.code===overview.code){multiAirObject=createMultiAirObject({},destPlace,originPlace,multiAirObject);}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return _context.abrupt(\"return\",multiAirObject);case 9:case\"end\":return _context.stop();}}},_callee);}));return function findMultiAirline(_x){return _ref.apply(this,arguments);};}();var createMultiAirObject=function createMultiAirObject(){var overview=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var destPlace=arguments.length>1?arguments[1]:undefined;var originPlace=arguments.length>2?arguments[2]:undefined;var multiAirObject=arguments.length>3?arguments[3]:undefined;overview['name']='Multiple';overview['code']=originPlace['origin']+destPlace['origin'];overview['origin']=originPlace['origin'];overview['destination']=destPlace['destination'];overview['departureTime']=originPlace['departureTime'];overview['arrivalTime']=destPlace['arrivalTime'];var originTime=originPlace['date']+' '+originPlace['departureTime'];var destTime=destPlace['date']+' '+destPlace['arrivalTime'];overview['duration']=calculateTimeDifference(originTime,destTime);overview['price']=parseInt(originPlace['price'])+parseInt(destPlace['price']);multiAirObject.push({destination:destPlace,origin:originPlace,overview:overview});return multiAirObject;};","map":{"version":3,"sources":["/Users/sashankpindiproli/flightsearchapp/src/util.js"],"names":["moment","formatDisplayDate","date","format","replace","calculateTimeDifference","departureTime","arrivalTime","startTime","endTime","duration","diff","hours","parseInt","asHours","minutes","asMinutes","formatMoney","price","currency","console","log","findMultiAirline","flightsList","originAirport","destinationAirport","multiAirObject","destinations","filter","destination","origin","origins","overview","originPlace","destPlace","length","createMultiAirObject","object","code","originTime","destTime","push"],"mappings":"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","sourcesContent":["/**\n * File Description: This is a utility file to have shared functions\n * Author(s): Sashank Pindiproli\n * Date of Creation: 03/02/2020\n */\nimport moment from 'moment';\n\nexport const formatDisplayDate = (date) =>\n  moment(date).format('LLLL').replace(moment(date).format('LT'), '');\n\nexport const calculateTimeDifference = (departureTime, arrivalTime) => {\n  let startTime = moment(departureTime, 'YYYY/MM/DD HH:mm:ss');\n  let endTime = moment(arrivalTime, 'YYYY/MM/DD HH:mm:ss');\n\n  // calculate total duration\n  let duration = moment.duration(endTime.diff(startTime));\n\n  // duration in hours\n  let hours = parseInt(duration.asHours());\n\n  // duration in minutes\n  let minutes = parseInt(duration.asMinutes()) % 60;\n  return `${hours} h ${minutes} m`;\n};\n\nexport const formatMoney = (price, currency) => {\n  switch (currency) {\n    case 'INR':\n      return `\\u20B9 ${price}`;\n    case 'DLR':\n      return `\\u0024 ${price}`;\n    default:\n      console.log('Error');\n  }\n};\n\n/**\n * \n * SAMPLE OBJECT = {\n    \"arrivalTime\": \"14:15\",\n    \"date\": \"2020/11/01\",\n    \"departureTime\": \"13:15\",\n    \"destination\": \"Pune (PNQ)\",\n    \"flightNo\": \"AI-117\",\n    \"name\": \"Air India\",\n    \"origin\": \"Mumbai (BOM)\",\n    \"price\": 5117\n  },\n  {\n    \"arrivalTime\": \"6:00\",\n    \"date\": \"2020/11/02\",\n    \"departureTime\": \"5:00\",\n    \"destination\": \"Mumbai (BOM)\",\n    \"flightNo\": \"AI-119\",\n    \"name\": \"Air India\",\n    \"origin\": \"Delhi (DEL)\",\n    \"price\": 3525\n  }, \n */\nexport const findMultiAirline = async (\n  flightsList,\n  originAirport = 'Pune (PNQ)',\n  destinationAirport = 'Delhi (DEL)'\n) => {\n  let multiAirObject = [];\n  // Seperate all the ones that are having matching origins\n  // Seperate all the ones that are having matching destinations\n  let destinations = flightsList.filter(\n    ({ destination, origin }) =>\n      destination === destinationAirport && origin !== originAirport\n  );\n\n  let origins = flightsList.filter(\n    ({ destination, origin }) =>\n      origin === originAirport && destination !== destinationAirport\n  );\n\n  let overview = {};\n  for (let originPlace of origins) {\n    for (let destPlace of destinations) {\n      if (originPlace['destination'] === destPlace['origin']) {\n        /** LOGIC to add first into the array, then check if it exists, check if its already added in the array, if not add it */\n        if (multiAirObject.length === 0) {\n          multiAirObject = createMultiAirObject(\n            {},\n            destPlace,\n            originPlace,\n            multiAirObject\n          );\n        } else {\n          for (let object of multiAirObject) {\n            if (!object.overview.code === overview.code) {\n              multiAirObject = createMultiAirObject(\n                {},\n                destPlace,\n                originPlace,\n                multiAirObject\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n  return multiAirObject;\n};\n\nconst createMultiAirObject = (\n  overview = {},\n  destPlace,\n  originPlace,\n  multiAirObject\n) => {\n  overview['name'] = 'Multiple';\n  overview['code'] = originPlace['origin'] + destPlace['origin'];\n  overview['origin'] = originPlace['origin'];\n  overview['destination'] = destPlace['destination'];\n  overview['departureTime'] = originPlace['departureTime'];\n  overview['arrivalTime'] = destPlace['arrivalTime'];\n  let originTime = originPlace['date'] + ' ' + originPlace['departureTime'];\n  let destTime = destPlace['date'] + ' ' + destPlace['arrivalTime'];\n\n  overview['duration'] = calculateTimeDifference(originTime, destTime);\n\n  overview['price'] =\n    parseInt(originPlace['price']) + parseInt(destPlace['price']);\n  multiAirObject.push({\n    destination: destPlace,\n    origin: originPlace,\n    overview,\n  });\n  return multiAirObject;\n};\n"]},"metadata":{},"sourceType":"module"}