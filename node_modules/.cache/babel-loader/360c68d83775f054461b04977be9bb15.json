{"ast":null,"code":"/**\n * File Description: This is a utility file to have shared functions\n * Author(s): Sashank Pindiproli\n * Date of Creation: 03/02/2020\n */\nimport moment from 'moment';\nexport const formatDisplayDate = date => moment(date).format('LLLL').replace(moment(date).format('LT'), '');\nexport const calculateTimeDifference = (departureTime, arrivalTime) => {\n  let startTime = moment(departureTime, 'YYYY/MM/DD HH:mm:ss');\n  let endTime = moment(arrivalTime, 'YYYY/MM/DD HH:mm:ss'); // calculate total duration\n\n  let duration = moment.duration(endTime.diff(startTime)); // duration in hours\n\n  let hours = parseInt(duration.asHours()); // duration in minutes\n\n  let minutes = parseInt(duration.asMinutes()) % 60;\n  return `${hours} h ${minutes} m`;\n};\nexport const formatMoney = (price, currency) => {\n  switch (currency) {\n    case 'INR':\n      return `\\u20B9 ${price}`;\n\n    case 'DLR':\n      return `\\u0024 ${price}`;\n  }\n};\n/**\n * \n * SAMPLE OBJECT = {\n    \"arrivalTime\": \"14:15\",\n    \"date\": \"2020/11/01\",\n    \"departureTime\": \"13:15\",\n    \"destination\": \"Pune (PNQ)\",\n    \"flightNo\": \"AI-117\",\n    \"name\": \"Air India\",\n    \"origin\": \"Mumbai (BOM)\",\n    \"price\": 5117\n  },\n  {\n    \"arrivalTime\": \"6:00\",\n    \"date\": \"2020/11/02\",\n    \"departureTime\": \"5:00\",\n    \"destination\": \"Mumbai (BOM)\",\n    \"flightNo\": \"AI-119\",\n    \"name\": \"Air India\",\n    \"origin\": \"Delhi (DEL)\",\n    \"price\": 3525\n  }, \n */\n\nexport const findMultiAirline = async (flightsList, originAirport = 'Pune (PNQ)', destinationAirport = 'Delhi (DEL)') => {\n  let multiAirObject = []; // Seperate all the ones that are having matching origins\n  // Seperate all the ones that are having matching destinations\n\n  let destinations = flightsList.filter(({\n    destination,\n    origin\n  }) => destination === destinationAirport && origin !== originAirport);\n  let origins = flightsList.filter(({\n    destination,\n    origin\n  }) => origin === originAirport && destination !== destinationAirport);\n  let overview = {};\n\n  for (let originPlace of origins) {\n    for (let destPlace of destinations) {\n      if (originPlace['destination'] === destPlace['origin']) {\n        /** LOGIC to add first into the array, then check if it exists, check if its already added in the array, if not add it */\n        if (multiAirObject.length === 0) {} else {\n          for (let object of multiAirObject) {\n            if (!object.overview.code === overview.code) {\n              overview['name'] = 'Multiple';\n              overview['code'] = originPlace['origin'] + destPlace['origin'];\n              overview['origin'] = originPlace['origin'];\n              overview['destination'] = destPlace['destination'];\n              overview['departureTime'] = originPlace['departureTime'];\n              overview['arrivalTime'] = destPlace['arrivalTime'];\n              let originTime = originPlace['date'] + ' ' + originPlace['departureTime'];\n              let destTime = destPlace['date'] + ' ' + destPlace['arrivalTime'];\n              overview['duration'] = calculateTimeDifference(destTime, originTime);\n              console.log(originPlace['price'], destPlace['price']);\n              overview['price'] = parseInt(originPlace['price']) + parseInt(destPlace['price']);\n              multiAirObject.push({\n                destination: destPlace,\n                origin: originPlace,\n                overview\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return multiAirObject;\n};\n\nconst createObject = (overview, destPlace, originPlace, multiAirObject) => {\n  overview['name'] = 'Multiple';\n  overview['code'] = originPlace['origin'] + destPlace['origin'];\n  overview['origin'] = originPlace['origin'];\n  overview['destination'] = destPlace['destination'];\n  overview['departureTime'] = originPlace['departureTime'];\n  overview['arrivalTime'] = destPlace['arrivalTime'];\n  let originTime = originPlace['date'] + ' ' + originPlace['departureTime'];\n  let destTime = destPlace['date'] + ' ' + destPlace['arrivalTime'];\n  overview['duration'] = calculateTimeDifference(destTime, originTime);\n  console.log(originPlace['price'], destPlace['price']);\n  overview['price'] = parseInt(originPlace['price']) + parseInt(destPlace['price']);\n  multiAirObject.push({\n    destination: destPlace,\n    origin: originPlace,\n    overview\n  });\n  return multiAirObject;\n};","map":{"version":3,"sources":["/Users/sashankpindiproli/flightsearchapp/src/util.js"],"names":["moment","formatDisplayDate","date","format","replace","calculateTimeDifference","departureTime","arrivalTime","startTime","endTime","duration","diff","hours","parseInt","asHours","minutes","asMinutes","formatMoney","price","currency","findMultiAirline","flightsList","originAirport","destinationAirport","multiAirObject","destinations","filter","destination","origin","origins","overview","originPlace","destPlace","length","object","code","originTime","destTime","console","log","push","createObject"],"mappings":"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","sourcesContent":["/**\n * File Description: This is a utility file to have shared functions\n * Author(s): Sashank Pindiproli\n * Date of Creation: 03/02/2020\n */\nimport moment from 'moment';\n\nexport const formatDisplayDate = (date) =>\n  moment(date).format('LLLL').replace(moment(date).format('LT'), '');\n\nexport const calculateTimeDifference = (departureTime, arrivalTime) => {\n  let startTime = moment(departureTime, 'YYYY/MM/DD HH:mm:ss');\n  let endTime = moment(arrivalTime, 'YYYY/MM/DD HH:mm:ss');\n\n  // calculate total duration\n  let duration = moment.duration(endTime.diff(startTime));\n\n  // duration in hours\n  let hours = parseInt(duration.asHours());\n\n  // duration in minutes\n  let minutes = parseInt(duration.asMinutes()) % 60;\n  return `${hours} h ${minutes} m`;\n};\n\nexport const formatMoney = (price, currency) => {\n  switch (currency) {\n    case 'INR':\n      return `\\u20B9 ${price}`;\n    case 'DLR':\n      return `\\u0024 ${price}`;\n  }\n};\n\n/**\n * \n * SAMPLE OBJECT = {\n    \"arrivalTime\": \"14:15\",\n    \"date\": \"2020/11/01\",\n    \"departureTime\": \"13:15\",\n    \"destination\": \"Pune (PNQ)\",\n    \"flightNo\": \"AI-117\",\n    \"name\": \"Air India\",\n    \"origin\": \"Mumbai (BOM)\",\n    \"price\": 5117\n  },\n  {\n    \"arrivalTime\": \"6:00\",\n    \"date\": \"2020/11/02\",\n    \"departureTime\": \"5:00\",\n    \"destination\": \"Mumbai (BOM)\",\n    \"flightNo\": \"AI-119\",\n    \"name\": \"Air India\",\n    \"origin\": \"Delhi (DEL)\",\n    \"price\": 3525\n  }, \n */\nexport const findMultiAirline = async (\n  flightsList,\n  originAirport = 'Pune (PNQ)',\n  destinationAirport = 'Delhi (DEL)'\n) => {\n  let multiAirObject = [];\n  // Seperate all the ones that are having matching origins\n  // Seperate all the ones that are having matching destinations\n  let destinations = flightsList.filter(\n    ({ destination, origin }) =>\n      destination === destinationAirport && origin !== originAirport\n  );\n\n  let origins = flightsList.filter(\n    ({ destination, origin }) =>\n      origin === originAirport && destination !== destinationAirport\n  );\n\n  let overview = {};\n  for (let originPlace of origins) {\n    for (let destPlace of destinations) {\n      if (originPlace['destination'] === destPlace['origin']) {\n        /** LOGIC to add first into the array, then check if it exists, check if its already added in the array, if not add it */\n        if (multiAirObject.length === 0) {\n        } else {\n          for (let object of multiAirObject) {\n            if (!object.overview.code === overview.code) {\n              overview['name'] = 'Multiple';\n              overview['code'] = originPlace['origin'] + destPlace['origin'];\n              overview['origin'] = originPlace['origin'];\n              overview['destination'] = destPlace['destination'];\n              overview['departureTime'] = originPlace['departureTime'];\n              overview['arrivalTime'] = destPlace['arrivalTime'];\n              let originTime =\n                originPlace['date'] + ' ' + originPlace['departureTime'];\n              let destTime = destPlace['date'] + ' ' + destPlace['arrivalTime'];\n\n              overview['duration'] = calculateTimeDifference(\n                destTime,\n                originTime\n              );\n              console.log(originPlace['price'], destPlace['price']);\n              overview['price'] =\n                parseInt(originPlace['price']) + parseInt(destPlace['price']);\n              multiAirObject.push({\n                destination: destPlace,\n                origin: originPlace,\n                overview,\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  return multiAirObject;\n};\n\nconst createObject = (overview, destPlace, originPlace, multiAirObject) => {\n  overview['name'] = 'Multiple';\n  overview['code'] = originPlace['origin'] + destPlace['origin'];\n  overview['origin'] = originPlace['origin'];\n  overview['destination'] = destPlace['destination'];\n  overview['departureTime'] = originPlace['departureTime'];\n  overview['arrivalTime'] = destPlace['arrivalTime'];\n  let originTime = originPlace['date'] + ' ' + originPlace['departureTime'];\n  let destTime = destPlace['date'] + ' ' + destPlace['arrivalTime'];\n\n  overview['duration'] = calculateTimeDifference(destTime, originTime);\n  console.log(originPlace['price'], destPlace['price']);\n  overview['price'] =\n    parseInt(originPlace['price']) + parseInt(destPlace['price']);\n  multiAirObject.push({\n    destination: destPlace,\n    origin: originPlace,\n    overview,\n  });\n  return multiAirObject;\n};\n"]},"metadata":{},"sourceType":"module"}